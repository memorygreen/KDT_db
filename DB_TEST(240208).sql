/*2024.02.08. DB시험*/
/***********Question 2**************/
SELECT EMPLOYEE_ID
      ,JOB_ID
      ,NVL(COMMISSION_PCT, 0.5) AS COMMISSION_PCT
      ,MANAGER_ID
  FROM EMPLOYEES
 WHERE MANAGER_ID = 100;      
/***********Question 4**************/
SELECT A.EMPLOYEE_ID
     , A.EMAIL
     , A.SALARY
     , B.DEPARTMENT_NAME
  FROM EMPLOYEES A
     , DEPARTMENTS B
 WHERE A.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

SELECT A.EMPLOYEE_ID
     , A.EMAIL
     , A.SALARY
     , B.DEPARTMENT_NAME
  FROM EMPLOYEES A
     , DEPARTMENTS B
 WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;
 
/***********Question 7**************/
-- 문제
SELECT JOB_ID, AVG(SALARY) AS 평균연봉
  FROM EMPLOYEES
 WHERE AVG(SALARY) > 13000
 GROUP BY JOB_ID;
 
-- 답안
SELECT JOB_ID, AVG(SALARY) AS 평균연봉
  FROM EMPLOYEES
 GROUP BY JOB_ID
 HAVING AVG(SALARY) > 13000
 ORDER BY AVG(SALARY) DESC;

-- AVG는 그룹함수인데, WHERE절의 조건 내용에 그룹함수는 작성할 수없다. 
-- 따라서 그룹화 이후에 조건을 주는 HAVING 절에 그룹함수가 포함된 조건 'AVG(SALARY) > 13000'을 작성해야 한다.
--추가로, 문제에서 제시된 출력하고자하는 결과와 같게 출력하려면 정렬을 하는 ORDER BY절에 평균연봉 즉 AVG(SALARY)을 기준으로 내림차순으로 정렬해야한다.

/***********Question 8**************/
SELECT EMPLOYEE_ID, EMAIL, SALARY
  FROM (SELECT EMPLOYEE_ID, EMAIL, SALARY
          FROM EMPLOYEES
         WHERE SALARY IS NOT NULL
      ORDER BY SALARY DESC)
 WHERE ROWNUM <= 5;

/***********Question 9**************/
--ANSI 표기로 풀기

SELECT E.EMPLOYEE_ID
      ,E.EMAIL
      ,E.SALARY
      ,D.DEPARTMENT_NAME
      ,D.LOCATION_ID
  FROM  EMPLOYEES E INNER JOIN DEPARTMENTS D
    ON (D.DEPARTMENT_ID = E.DEPARTMENT_ID)
 WHERE  E.SALARY >= 14000 ;

/***********Question 10**************/

--문제 : LEFT JOIN(ORACLE 표기)
SELECT A.DEPARTMENT_ID
      ,A.DEPARTMENT_NAME
      ,A.MANAGER_ID
      ,B.FIRST_NAME
      ,B.LAST_NAME
  FROM DEPARTMENTS A
      ,EMPLOYEES B
 WHERE A.MANAGER_ID = B.EMPLOYEE_ID(+)
   AND A.LOCATION_ID = 1700 ;

-- ANSI 표기
SELECT A.DEPARTMENT_ID
      ,A.DEPARTMENT_NAME
      ,A.MANAGER_ID
      ,B.FIRST_NAME
      ,B.LAST_NAME
  FROM DEPARTMENTS A LEFT OUTER JOIN EMPLOYEES B
    ON (A.MANAGER_ID = B.EMPLOYEE_ID)
 WHERE  A.LOCATION_ID = 1700 ;






/****************Question 11********************/
--1) 
CREATE TABLE TB_STUDENT(
    STUDENT_ID NUMBER NOT NULL,
    STUDENT_NAME VARCHAR2(50) NOT NULL,
    AGE NUMBER DEFAULT 20,
    MAJOR_ID VARCHAR2(50)
);

--DROP TABLE TB_STUDENT;
CREATE TABLE TB_MAJOR(
    MAJOR_ID VARCHAR2(50) NOT NULL,
    MAJOR_NAME VARCHAR2(100) NOT NULL,
    INST_DY VARCHAR2(8) NOT NULL
);

SELECT *
  FROM TB_STUDENT;
  
--2)  
ALTER TABLE TB_STUDENT ADD CONSTRAINT PK_STUDENT PRIMARY KEY(STUDENT_ID);

--3)
ALTER TABLE TB_MAJOR ADD CONSTRAINT PK_MAJOR PRIMARY KEY(MAJOR_ID);

--4) 
INSERT INTO TB_MAJOR (MAJOR_ID, MAJOR_NAME, INST_DY) VALUES ('M0001', '정보공학과', '19960201');
INSERT INTO TB_MAJOR (MAJOR_ID, MAJOR_NAME, INST_DY) VALUES ('M0002', '경영학과', '20000302');

--5)
INSERT INTO TB_STUDENT (STUDENT_ID, STUDENT_NAME, AGE, MAJOR_ID) VALUES (1000, '김철수', 20, 'M0001');
INSERT INTO TB_STUDENT (STUDENT_ID, STUDENT_NAME, AGE, MAJOR_ID) VALUES (2000, '홍길동', 21, 'M0002');


--6)
UPDATE TB_MAJOR SET MAJOR_NAME = '인공지능융합과'
 WHERE MAJOR_NAME = '정보공학과';

--7)
DELETE FROM TB_STUDENT 
  WHERE STUDENT_ID = 1000;


-- 확인용
--SELECT *
--  FROM TB_STUDENT;
--
--SELECT *
--  FROM TB_MAJOR;